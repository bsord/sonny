name: "Bump Version"

env:
  # Docker image name to publish to
  IMAGE_NAME: bsord/sonny

on:
  push:
    branches:
      - "master"

jobs:
  bump-version:
    name: "Bump Version on master"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout source code"
        uses: "actions/checkout@v2"
        with:
          ref: ${{ github.ref }}
      - name: "Setup Node.js"
        uses: "actions/setup-node@v1"
        with:
          node-version: 12
      - name: "Automated Version Bump"
        uses: "phips28/gh-action-bump-version@master"
        with:
          tag-prefix: ''
          minor-wording:  'add,new,feat,feature'
          major-wording:  'MAJOR, refactor'
          #patch-wording:  'patch, fix'     # Providing patch-wording will override commits defaulting to a patch bump.
          rc-wording:     'RELEASE,alpha'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


          name: Build and Publish



name: "Build and publish Docker image"

env:
  # Docker image name to publish to
  IMAGE_NAME: bsord/sonny

on:
  push:
    tags:
    - '*'
  push-docker-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login -u ${{ secrets.CR_USERNAME }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  